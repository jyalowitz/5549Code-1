#include <iostream>
#include <memory>
#include <string>
#include <math.h>
#include <WPILib.h>
#include <Joystick.h>
#include <SampleRobot.h>
#include <SmartDashboard/SendableChooser.h>
#include <SmartDashboard/SmartDashboard.h>
#include <RobotDrive.h>
#include <Timer.h>
#include <chrono>
#include <thread>
#include <time.h>
#include <SPI.h>
#include <ADXRS450_Gyro.h>





/************FOR XBOX 360 CONTROLLER**********
 *
 * BUTTON NUMBERS
 * ButtonA = 1
 * ButtonB = 2
 * ButtonX = 3
 * ButtonY = 4
 * LeftBumper = 5
 * RightBumper = 6
 * Select = 7
 * Start = 8
 * LeftClick = 9
 * RightClick = 10
 *
 * THUMBSTICK AXIS
 * LeftXAxis = 1 (top is -1, rest is 0, bottom is 1)
 * LeftYAxis = 2
 * TriggerAxis = 3
 *
 * RightXAxis = 4
 * RightYAxis = 5
 *
 */

/*********** PWM Ports **************
 * 0 constIntake
 * 1 leftFront
 * 2 leftBack
 * 3 rightBack
 * 4 rightFront
 * 5 climbTake
 * 6 shooterBall
 * 7
 * 8
 * 9
 */

class Robot: public frc::IterativeRobot {
	public:

		ADXRS450_Gyro gyro;


		Robot() {

			myRobot.SetExpiration(0.1);

			timer.Start();
			CameraServer::GetInstance()->StartAutomaticCapture();
		//	int ledcolor = 0;
			//Wheels
			/*
			Victor *leftFront  = new Victor(1);
			Victor *leftBack = new Victor(2);
			Victor *rightFront = new Victor(4);
			Victor *rightBack = new Victor(3);

			//Components
			Spark *climbTake = new Spark(5);
			Victor *constIntake = new Victor(0);
			*/
		}

private:
	Victor *leftFront  = new Victor(1);
	Victor *leftBack = new Victor(2);
	Victor *rightFront = new Victor(4);
	Victor *rightBack = new Victor(3);

	void leftSide(double x) {
		leftFront->Set(x);
		leftBack->Set(x);
	}
	void rightSide(double x) {
		rightFront->Set(x);
		rightBack->Set(x);
	}
	//Components
	Spark *climbTake = new Spark(5);
	Spark *shooterBall = new Spark(6);
	Victor *constIntake = new Victor(0);

	Timer autoTimer;
	RobotDrive myRobot { leftFront , leftBack , rightBack , rightFront }; // Robot drive system
	Joystick playerOne { 0 }; // Only joystick
	Joystick playerTwo { 1 };
	//DigitalOutput *ledred = new DigitalOutput(1);
	//DigitalOutput ledblue;// = new DigitalOutput(0);
	bool shooterButton = playerOne.GetRawButton(1);
	bool climberButton = playerOne.GetRawButton(2);
	SmartDashboard* dash = new SmartDashboard();
	LiveWindow* lw = frc::LiveWindow::GetInstance();
	Timer timer;
	void AutonomousInit() override {
		timer.Reset();
		timer.Start();
		gyro.Calibrate();

	}

	void AutonomousPeriodic() override {

		//SET THIS VARIABLE BEFORE RUN
		int areaVar = 4;
		//**^^^^^^^^**//
		//http://i1.kym-cdn.com/photos/images/newsfeed/000/744/952/c65.jpg//
		if (areaVar == 1) {
			areaOne();
		}
		if (areaVar == 2) {
			areaTwo();
		}
		if (areaVar == 3) {
			areaThree();
		}
		if(areaVar==4){
			areaFour();
		}
	}
	void areaOne() {
		autoTimer.Reset();		//These two lines should begin every autonomous section
		autoTimer.Start();		//when using a timer.
//forwards until time in seconds
		myRobot.TankDrive (0.80 , 0 );
		if ( autoTimer.Get() >= 1.0 ){   //**   MEASURE THEN REPLACE    **//
			myRobot.StopMotor();
			autoTimer.Stop();
			autoTimer.Reset();
		}
	}
	void areaTwo(){
		autoTimer.Reset();
		autoTimer.Start();
		//forwards until time in seconds
		myRobot.TankDrive(0.5, 0.5 );
		if ( autoTimer.Get() >= 1.0 ) {
			myRobot.StopMotor();
			autoTimer.Stop();
			autoTimer.Reset();
		}	}
	void areaThree() {
		autoTimer.Reset();
		autoTimer.Start();
		//forwards until time in seconds
		myRobot.TankDrive(0.6, 0.5 );
		if ( autoTimer.Get() >= 3.0 ) {
			myRobot.StopMotor();
			autoTimer.Stop();
			autoTimer.Reset();
		}
		//Turn until time in seconds
		leftSide(0.5);
		rightSide(-0.5);
		if ( autoTimer.Get() >= 2.0 ) {
			myRobot.StopMotor();
			autoTimer.Stop();
			autoTimer.Reset();
		}}
		void areaFour(){
				autoTimer.Reset();
				autoTimer.Start();

				double angle = gyro.GetAngle(); //gets heading of gyro
				dash->PutNumber("Gyro Value:", angle);
				std::cout << angle;
				//forwards until time in seconds
				myRobot.Drive(0.25, angle*5);

				Wait(.05);


		}

	//OPERATOR CONTROL
	void TeleopInit() override {
		gyro.Reset();
	}

	void TeleopPeriodic() override {
		if (playerTwo.GetRawButton(5)){ //7 for xbox
			constIntake->Set(0.5);
		}
		if (playerTwo.GetRawButton(3)){//8
			constIntake->Set(-0.5);
		}
		if (playerTwo.GetRawButton(4)){
			constIntake->Set(0);
		}
		//** Tank Drive with Controller #1 (The negative signs are for inversion)**//

		myRobot.TankDrive( -playerOne.GetRawAxis(1)/1.25,-playerOne.GetRawAxis(5)/1.25);

		//Controls Speed of Intake
		climbTake->Set(-playerTwo.GetRawAxis(1)*2); //Set motor equal to intake speed

		shooterBall->Set(playerTwo.GetRawAxis(3)/1.15);

		/*/ When "B" button is pressed, the below statement checks the speed of the motor,
		    and only turns off the motor when it is running. /*/
		//if ( playerTwo.GetRawButton(3) ) { //SHOOTER
			//if ( shooterBall->GetSpeed() == 0 ) { //If the motor isn't moving, set to max speed when
				//shooterBall->Set( 0.70 );			//^button is pressed
			//}
			//if ( shooterBall->GetSpeed() >= 0.2 ) {
				//shooterBall->Set( 0 );
			//}
		//}
	/*	if (playerTwo.GetRawButton(10)){ //change led color to red
					ledred->Set(true);
					ledblue->Set(false);
				}


*/
	}

	void TestPeriodic() override {
		lw->Run();
	}
};

START_ROBOT_CLASS(Robot)
